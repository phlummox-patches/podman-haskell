# adapted from https://github.com/haskell-CI/haskell-ci/issues/411

name: haskell-build

on: [push, pull_request]

jobs:
  build:

    # this env includes a "secret" called
    # CACHE_DATE, that you can change in order to clear the
    # cache if necessary.
    # see https://github.community/t/how-to-clear-cache-in-github-actions/129038/4
    environment: ci-env

    runs-on: ${{ matrix.os }}
    env:
      STACK_VERSION: "2.1.3"
    strategy:
      fail-fast: false
      matrix:
        builder:
          - 'cabal'
          - 'stack-lts-13.30'
        os: [ubuntu-18.04] #, macOS-latest, windows-latest]

    name: ${{ matrix.builder }} on ${{matrix.os}}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Haskell
        uses: haskell/actions/setup@v1.2.3
        with:
          # TODO:
          # ghc-version: ${{ matrix.ghc }}
          # cabal-version: ${{ matrix.cabal }}
          ghc-version: '8.6'
          cabal-version: '2.4'

      - name: Cache
        uses: actions/cache@v2
        env:
          cache-name: haskell-cache
        with:
          path: |
            ~/.cabal
            ~/.local
            ~/.ghc
            ~/.stack
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.builder }}-${{ secrets.CACHE_DATE }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.builder }}-${{ secrets.CACHE_DATE }}
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.builder }}
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: dependencies for ${{ matrix.builder }} on ${{matrix.os}}
        run: |
          set -ex
          sudo apt-get update && sudo apt-get install -y xz-utils curl

          case ${{ matrix.builder }} in
            stack*)
              mkdir -p "$HOME/.local/bin"
              export PATH=$HOME/.local/bin:$PATH
              export LINUX64_STACK="https://github.com/commercialhaskell/stack/releases/download/v${STACK_VERSION}/stack-${STACK_VERSION}-linux-x86_64.tar.gz"
              curl -L "${LINUX64_STACK}" | tar xz --wildcards --strip-components=1 -C $HOME/.local/bin '*/stack'
            ;;
          esac

          set +ex

      - name: build using ${{ matrix.builder }} on ${{matrix.os}}
        run: |
          set -ex

          case ${{ matrix.builder }} in
            cabal*)
              .ci-scripts/cabal-build.sh
            ;;
            stack*)
              # build project with stack
              stack --version
              STACK_RESOLVER="$(echo ${{ matrix.builder }} | sed 's/^stack-//')"
              stack --resolver="$STACK_RESOLVER" setup
              stack --resolver="$STACK_RESOLVER" ghc -- --version
              # get appropriate stack.yaml
              if [ -f "stack-${STACK_RESOLVER}.yaml" ] ; then
                cp "stack-${STACK_RESOLVER}.yaml" stack.yaml
              else
                printf >&2 "not a good idea. custom stack.yaml needed for this repo"
                exit 1
              fi
              stack build  --test --no-run-tests
              #stack test
            ;;
            *)
              echo unknown build tool!!
              exit 1
            ;;
          esac

          set +ex

      - name: run codegen on ${{matrix.os}}
        run: |
          set -ex

          export PATH=$HOME/.local/bin:$PATH

          # codegen runtime prereqs
          stack --resolver=lts-17 setup
          (cd ~ && stack --resolver=lts-17 install ormolu apply-refact hlint)

          # set stack resolver
          case ${{ matrix.builder }} in
            cabal*)
              export STACK_RESOLVER=lts-13.30
            ;;
            stack*)
              export STACK_RESOLVER="$(echo ${{ matrix.builder }} | sed 's/^stack-//')"
            ;;
            *)
              echo unknown build tool!!
              exit 1
            ;;
          esac

          # stack setup
          stack --version
          stack --resolver="$STACK_RESOLVER" setup
          stack --resolver="$STACK_RESOLVER" ghc -- --version

          # get appropriate stack.yaml
          if [ -f "stack-${STACK_RESOLVER}.yaml" ] ; then
            cp "stack-${STACK_RESOLVER}.yaml" stack.yaml
          else
            printf >&2 "not a good idea. custom stack.yaml needed for this repo"
            exit 1
          fi

          # run codegen
          ./regenerate-podman-types.sh

          set +ex

      - name: re-build using ${{ matrix.builder }} on ${{matrix.os}}
        run: |
          set -ex

          case ${{ matrix.builder }} in
            cabal*)
              .ci-scripts/cabal-build.sh
            ;;
            stack*)
              # build project with stack
              stack --version
              STACK_RESOLVER="$(echo ${{ matrix.builder }} | sed 's/^stack-//')"
              stack --resolver="$STACK_RESOLVER" setup
              stack --resolver="$STACK_RESOLVER" ghc -- --version
              # get appropriate stack.yaml
              if [ -f "stack-${STACK_RESOLVER}.yaml" ] ; then
                cp "stack-${STACK_RESOLVER}.yaml" stack.yaml
              else
                printf >&2 "not a good idea. custom stack.yaml needed for this repo"
                exit 1
              fi
              stack build  --test --no-run-tests
              #stack test
            ;;
            *)
              echo unknown build tool!!
              exit 1
            ;;
          esac

          set +ex

      - name: run tests using ${{ matrix.builder }} on ${{matrix.os}}
        run: |
          set -ex

          case ${{ matrix.builder }} in
            cabal*)
              .ci-scripts/cabal-test.sh
            ;;
            stack*)
              # build project with stack
              stack --version
              STACK_RESOLVER="$(echo ${{ matrix.builder }} | sed 's/^stack-//')"
              stack --resolver="$STACK_RESOLVER" setup
              stack --resolver="$STACK_RESOLVER" ghc -- --version
              # get appropriate stack.yaml
              if [ -f "stack-${STACK_RESOLVER}.yaml" ] ; then
                cp "stack-${STACK_RESOLVER}.yaml" stack.yaml
              else
                printf >&2 "not a good idea. custom stack.yaml needed for this repo"
                exit 1
              fi
              stack test
            ;;
            *)
              echo unknown build tool!!
              exit 1
            ;;
          esac

          set +ex

      - name: run demo using ${{ matrix.builder }} on ${{matrix.os}}
        run: |
          set -ex

          docker pull phlummox/alpine-podman
          docker -D run --rm --privileged --net=host --detach \
            phlummox/alpine-podman \
              podman --log-level=debug system service --time=0 tcp:0.0.0.0:3000

          sleep 2


          case ${{ matrix.builder }} in
            cabal*)
              cabal new-run podman-demo -- http://localhost:3000/ alpine:3.12.0 my-ctr
            ;;
            stack*)
              # build project with stack
              STACK_RESOLVER="$(echo ${{ matrix.builder }} | sed 's/^stack-//')"
              # get appropriate stack.yaml
              if [ -f "stack-${STACK_RESOLVER}.yaml" ] ; then
                cp "stack-${STACK_RESOLVER}.yaml" stack.yaml
              else
                printf >&2 "not a good idea. custom stack.yaml needed for this repo"
                exit 1
              fi
              stack exec podman-demo -- http://localhost:3000/ alpine:3.12.0 my-ctr
            ;;
            *)
              echo unknown build tool!!
              exit 1
            ;;
          esac



